from pydantic import BaseModel, UUID4
from typing import Optional, List

class BookBase(BaseModel):
    title: str
    author: str
    genre: str
    year_published: Optional[int] = None
    summary: Optional[str] = None

class BookCreate(BookBase):
    # Used for creating a book, no ID needed as it's automatically generated by the database
    pass

class Book(BookBase):
    id: UUID4  # This assumes that ID is an integer; change to UUID if you're using UUIDs.

    class Config:
        orm_mode = True

class ReviewBase(BaseModel):
    book_id: UUID4  # or UUID, depending on your Book.id type
    user_id: int  # Placeholder for user identity; ensure this aligns with your user model
    review_text: Optional[str] = None
    rating: float

class ReviewCreate(BaseModel):
    user_id: int  # Placeholder for user identity; ensure this aligns with your user model
    review_text: Optional[str] = None
    rating: float


class Review(ReviewBase):
    id: UUID4  # Add UUID if your IDs are UUIDs

    class Config:
        orm_mode = True
class UserCreate(BaseModel):
    username: str
    password: str  # Received as plain text, to be hashed before storage

class UserInDB(BaseModel):
    username: str
    hashed_password: str  # Store hashed passwords only

class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"

class LoginForm(BaseModel):
    username: str
    password: str

class UserRegistered(BaseModel):
    message: str

class SummaryText(BaseModel):
    text: str